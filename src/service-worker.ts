/// <reference lib="webworker" />
/// <reference lib="es2015" />

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { NetworkOnly } from 'workbox-strategies';
import { BackgroundSyncPlugin, Queue } from 'workbox-background-sync';

// Define types for service worker
declare let self: ServiceWorkerGlobalScope;
declare let __WB_MANIFEST: Array<{ url: string; revision: string | null }>;

// Create queues
const uploadQueue = new Queue('uploadQueue', {
  maxRetentionTime: 24 * 60
});

const testResultQueue = new Queue('testResultQueue', {
  maxRetentionTime: 24 * 60
});

clientsClaim();

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Cache the API responses
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
    ],
  })
);

// Cache static assets
registerRoute(
  ({ request }) => 
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'image',
  new CacheFirst({
    cacheName: 'static-resources',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Handle offline fallback
const offlineFallbackPage = '/offline';

// Cache the offline page
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'pages',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open('offline-fallback').then((cache) => {
      return cache.add(offlineFallbackPage);
    })
  );
});

// Handle uploads
registerRoute(
  ({ url }) => url.pathname.includes('/uploads'),
  new NetworkOnly({
    plugins: [
      new BackgroundSyncPlugin('uploadQueue', {
        maxRetentionTime: 24 * 60,
        onSync: async ({ queue }) => {
          try {
            await queue.replayRequests();
          } catch (error) {
            console.error('Upload sync failed:', error);
          }
        }
      })
    ]
  })
);

// Handle test results
registerRoute(
  ({ url }) => url.pathname.includes('/test-runs') && url.pathname.includes('/results'),
  new NetworkOnly({
    plugins: [
      new BackgroundSyncPlugin('testResultQueue', {
        maxRetentionTime: 24 * 60,
        onSync: async ({ queue }) => {
          try {
            await queue.replayRequests();
          } catch (error) {
            console.error('Test result sync failed:', error);
          }
        }
      })
    ]
  })
);

// Handle test result submissions
registerRoute(
  ({ url }) => url.pathname.includes('/test-runs') && url.pathname.includes('/execute'),
  new NetworkOnly({
    plugins: [
      new BackgroundSyncPlugin('test-results-queue', {
        maxRetentionTime: 24 * 60, // Retry for up to 24 hours
        onSync: async ({ queue }) => {
          try {
            await queue.replayRequests();
          } catch (error) {
            console.error('Failed to sync test results:', error);
          }
        }
      })
    ]
  })
);

// Listen for sync events
self.addEventListener('sync', (event) => {
  if (event.tag === 'uploadQueue') {
    event.waitUntil(uploadQueue.replayRequests());
  } else if (event.tag === 'testResultQueue') {
    event.waitUntil(testResultQueue.replayRequests());
  }
}); 