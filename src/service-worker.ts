/// <reference lib="webworker" />
/// <reference lib="es2015" />

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { NetworkOnly } from 'workbox-strategies';
import { BackgroundSyncPlugin, Queue } from 'workbox-background-sync';

// Define types for service worker
declare let self: ServiceWorkerGlobalScope;
declare let __WB_MANIFEST: Array<{ url: string; revision: string | null }>;

// Create queues
const uploadQueue = new Queue('uploadQueue', {
  maxRetentionTime: 24 * 60
});

const testResultQueue = new Queue('testResultQueue', {
  maxRetentionTime: 24 * 60
});

clientsClaim();

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Special handling for auth routes - never cache them
registerRoute(
  ({ url }) => 
    url.pathname.startsWith('/api/auth') || 
    url.pathname === '/api/auth/signin' || 
    url.pathname === '/api/auth/signout' || 
    url.pathname === '/api/auth/session',
  new NetworkOnly()
);

// Cache other API responses
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/') && !url.pathname.startsWith('/api/auth'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
    ],
  })
);

// Cache static assets
registerRoute(
  ({ request }) => 
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'image',
  new CacheFirst({
    cacheName: 'static-resources',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Handle offline fallback
const offlineFallbackPage = '/offline';
const authPage = '/auth/signin';

// Cache the offline and auth pages
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open('offline-fallback').then((cache) => {
      return cache.addAll([offlineFallbackPage, authPage]);
    })
  );
});

// Cache navigation requests with a network-first strategy
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'pages',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Handle offline navigation
self.addEventListener('fetch', (event) => {
  // Only handle navigation requests
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match(offlineFallbackPage).then(response => {
          return response || new Response('Offline page not found', {
            status: 503,
            statusText: 'Service Unavailable'
          });
        });
      })
    );
  }
});

// Handle uploads
registerRoute(
  ({ url }) => url.pathname.includes('/uploads'),
  new NetworkOnly({
    plugins: [
      new BackgroundSyncPlugin('uploadQueue', {
        maxRetentionTime: 24 * 60,
        onSync: async ({ queue }) => {
          try {
            await queue.replayRequests();
          } catch (error) {
            console.error('Upload sync failed:', error);
          }
        }
      })
    ]
  })
);

// Handle test results
registerRoute(
  ({ url }) => url.pathname.includes('/test-runs') && url.pathname.includes('/results'),
  new NetworkOnly({
    plugins: [
      new BackgroundSyncPlugin('testResultQueue', {
        maxRetentionTime: 24 * 60,
        onSync: async ({ queue }) => {
          try {
            await queue.replayRequests();
          } catch (error) {
            console.error('Test result sync failed:', error);
          }
        }
      })
    ]
  })
);

// Handle test result submissions
registerRoute(
  ({ url }) => url.pathname.includes('/test-runs') && url.pathname.includes('/execute'),
  new NetworkOnly({
    plugins: [
      new BackgroundSyncPlugin('test-results-queue', {
        maxRetentionTime: 24 * 60, // Retry for up to 24 hours
        onSync: async ({ queue }) => {
          try {
            await queue.replayRequests();
          } catch (error) {
            console.error('Failed to sync test results:', error);
          }
        }
      })
    ]
  })
);

// Listen for sync events
self.addEventListener('sync', (event) => {
  if (event.tag === 'uploadQueue') {
    event.waitUntil(uploadQueue.replayRequests());
  } else if (event.tag === 'testResultQueue') {
    event.waitUntil(testResultQueue.replayRequests());
  }
});

// Handle message events for authentication state change
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'AUTH_STATE_CHANGED') {
    const { isAuthenticated } = event.data;
    
    // Notify all clients about the auth state change
    self.clients.matchAll().then(clients => {
      clients.forEach(client => {
        client.postMessage({
          type: 'AUTH_STATE_UPDATED',
          isAuthenticated
        });
      });
    });
  }
}); 