// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id        String       @id @default(cuid())
  type      String       // Will store: 'ADMIN', 'PROJECT_MANAGER', 'TESTER', 'VIEWER'
  userRoles UserRoleMap[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([type])
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String
  name                  String?
  role                  String    @default("USER")
  emailVerified         DateTime?
  emailVerificationToken      String?
  emailVerificationExpires    DateTime?
  image                 String?
  status               String    @default("ACTIVE")
  twoFactorEnabled      Boolean   @default(false)
  twoFactorSecret       String?
  backupCodesData       String?
  backupCodesUpdatedAt  DateTime?
  currentChallenge      String?
  failedLoginAttempts   Int       @default(0)
  lockedUntil          DateTime?
  lastLogin            DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  emailNotificationsEnabled Boolean @default(true)

  sessions            Session[]
  webAuthnCredentials WebAuthnCredential[]
  testReports         TestReport[]
  userRoles           UserRoleMap[]
  projects            Project[]
  testCases           TestCase[]  @relation("AuthoredTestCases")
  testRuns            TestRun[]
  activities          ActivityLog[]
  trustedDevices      TrustedDevice[]
  apiKeys             ApiKey[]
  passwordHistory     PasswordHistory[]
  accounts            Account[]
  projectMemberships  ProjectMember[]
  backupCodes BackupCode[]
  backupCodesGeneratedAt DateTime?

  // Password reset
  passwordResetToken         String?
  passwordResetExpires       DateTime?
}

model UserRoleMap {
  id     String   @id @default(uuid())
  userId String   @map("user_id")
  roleId String   @map("role_id")
  user   User     @relation(fields: [userId], references: [id])
  role   Role     @relation(fields: [roleId], references: [id])

  @@index([userId])
  @@index([roleId])
}

model Session {
  id           String           @id @default(cuid())
  sessionToken String           @unique
  userId       String
  expiresAt    DateTime
  lastActive   DateTime         @default(now())
  userAgent    String?
  ipAddress    String?
  deviceInfo   String?
  createdAt    DateTime         @default(now())
  activities   SessionActivity[]
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SessionActivity {
  id        String   @id @default(cuid())
  sessionId String
  action    String
  timestamp DateTime @default(now())
  details   String?
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([timestamp])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String     @id @default(cuid())
  name        String
  description String?
  status      String     @default("ACTIVE")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  testCases   TestCase[]
  testRuns    TestRun[]
  testReports TestReport[]
  members     ProjectMember[]

  @@index([userId])
}

model TestCase {
  id             String           @id @default(cuid())
  title          String
  description    String
  steps          String
  expectedResult String
  actualResult   String?
  status         String
  priority       String
  projectId      String
  userId         String
  version        Int              @default(1)
  deleted        Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author         User             @relation("AuthoredTestCases", fields: [userId], references: [id])
  testRunCases   TestRunCase[]
  results        TestCaseResult[]

  @@index([projectId])
  @@index([userId])
}

model TestRun {
  id          String           @id @default(cuid())
  name        String
  status      String
  projectId   String
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id])
  testRunCases TestRunCase[]
  results     TestCaseResult[]

  @@index([projectId])
  @@index([userId])
}

model TestCaseResult {
  id         String   @id @default(cuid())
  status     String
  notes      String?
  testCaseId String
  testRunId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  testCase   TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  testRun    TestRun  @relation(fields: [testRunId], references: [id], onDelete: Cascade)

  @@index([testCaseId])
  @@index([testRunId])
}

model ActivityLog {
  id          String    @id @default(cuid())
  type        String    // 'AUTH' | 'USER' | 'SYSTEM'
  action      String    // Store the audit action
  userId      String    @map("user_id")
  targetId    String?   @map("target_id")
  metadata    String?   // JSON string
  ipAddress   String?   @map("ip_address")
  userAgent   String?   @map("user_agent")
  location    String?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([action])
  @@index([createdAt])
}

model TrustedDevice {
  id        String   @id
  userId    String
  name      String
  userAgent String
  lastUsed  DateTime
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model WebAuthnCredential {
  id                  String   @id @default(cuid())
  userId              String
  credentialID        String   @unique
  credentialPublicKey String
  counter             Int
  transportsData      String   // Store array as JSON string
  createdAt           DateTime @default(now())
  lastUsed            DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  hashedKey   String    @unique
  name        String
  scopesData  String    // Store array as JSON string
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hashedKey])
}

model PasswordHistory {
  id        String   @id @default(cuid())
  userId    String
  hash      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TestReport {
  id          String   @id @default(cuid())
  title       String
  content     String
  projectId   String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model RevokedToken {
  id        String    @id @default(cuid())
  token     String    @unique
  type      String    // TokenType enum value
  revokedAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([token])
  @@index([type])
  @@index([revokedAt])
}

model ProjectMember {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      String   @default("MEMBER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model TestRunCase {
  id         String   @id @default(cuid())
  testRunId  String
  testCaseId String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  testRun    TestRun  @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  testCase   TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  @@index([testRunId])
  @@index([testCaseId])
}

model BackupCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@index([userId])
}
