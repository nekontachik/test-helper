generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Change back to sqlite
  url      = env("DATABASE_URL")
}

model Role {
  id        String        @id @default(cuid())
  type      String // Will store: 'ADMIN', 'PROJECT_MANAGER', 'TESTER', 'VIEWER'
  userRoles UserRoleMap[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([type])
}

model User {
  id                        String    @id @default(cuid())
  name                      String?
  email                     String    @unique
  password                  String
  role                      String    @default("USER")
  image                     String?
  emailVerified             DateTime?
  emailVerificationToken    String?   @unique
  emailVerificationExpires  DateTime?
  resetToken                String?   @unique
  resetTokenExpiry          DateTime?
  emailChangeToken          String?   @unique
  emailChangeTokenExpiry    DateTime?
  pendingEmail              String?
  scheduledDeletion         DateTime?
  twoFactorEnabled          Boolean   @default(false)
  twoFactorSecret           String?
  status                    String    @default("ACTIVE")
  emailNotificationsEnabled Boolean   @default(true)
  currentChallenge          String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  failedLoginAttempts       Int       @default(0)
  lockedUntil               DateTime?

  // Relations
  userPermissions     UserPermission[]
  userRoles           UserRoleMap[]
  sessions            Session[]
  accounts            Account[]
  projects            Project[]
  authoredTestCases   TestCase[]           @relation("AuthoredTestCases")
  testRuns            TestRun[]
  activityLogs        ActivityLog[]
  trustedDevices      TrustedDevice[]
  webAuthnCredentials WebAuthnCredential[]
  apiKeys             ApiKey[]
  passwordHistory     PasswordHistory[]
  testReports         TestReport[]
  projectMemberships  ProjectMember[]
  backupCodes         BackupCode[]
  activities          UserActivity[]
  tokens              Token[]
  testCaseVersions    TestCaseVersion[]
  testRunCases        TestRunCase[]
  testCaseResults     TestCaseResult[]

  @@index([email])
  @@index([resetToken])
  @@index([emailChangeToken])
  @@index([lockedUntil])
}

model UserRoleMap {
  id     String @id @default(uuid())
  userId String @map("user_id")
  roleId String @map("role_id")
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@index([userId])
  @@index([roleId])
}

model Session {
  id           String            @id @default(cuid())
  sessionToken String            @unique
  userId       String
  expiresAt    DateTime
  lastActive   DateTime          @default(now())
  userAgent    String?
  ipAddress    String?
  deviceInfo   String?
  createdAt    DateTime          @default(now())
  activities   SessionActivity[]
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SessionActivity {
  id        String   @id @default(cuid())
  sessionId String
  action    String
  timestamp DateTime @default(now())
  details   String?
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([timestamp])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  status      String          @default("ACTIVE")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  testCases   TestCase[]
  testRuns    TestRun[]
  testReports TestReport[]
  members     ProjectMember[]
  testSuites  TestSuite[]

  @@index([userId])
}

model TestCase {
  id             String   @id @default(cuid())
  title          String
  description    String?
  steps          String
  expectedResult String
  actualResult   String   @default("")
  status         String // ACTIVE, DRAFT, ARCHIVED
  priority       String // LOW, MEDIUM, HIGH
  projectId      String
  userId         String
  currentVersion Int      @default(1)
  deleted        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  project      Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author       User              @relation("AuthoredTestCases", fields: [userId], references: [id])
  versions     TestCaseVersion[]
  testResults  TestResult[]
  testRunCases TestRunCase[]
  testResults2 TestCaseResult[]
  testSuites   TestSuite[]
  Version      Version[]

  @@index([projectId])
  @@index([userId])
}

model TestCaseVersion {
  id            String   @id @default(cuid())
  testCase      TestCase @relation(fields: [testCaseId], references: [id])
  testCaseId    String
  versionNumber Int
  changes       String
  data          Json
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([testCaseId, versionNumber])
}

model Version {
  id             String   @id @default(cuid())
  versionNumber  Int
  title          String
  description    String
  steps          String
  expectedResult String
  status         String
  priority       String
  testCase       TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  testCaseId     String
  createdAt      DateTime @default(now())

  @@index([testCaseId])
}

model TestRun {
  id          String        @id @default(cuid())
  name        String
  status      String
  projectId   String
  userId      String
  startTime   DateTime?
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  project     Project       @relation(fields: [projectId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  testRunCases TestRunCase[]
  testResults  TestCaseResult[]
  testReports  TestReport[]

  @@index([projectId])
  @@index([userId])
}

model TestRunCase {
  id          String   @id @default(cuid())
  testRunId   String
  testCaseId  String
  status      String   // PENDING, PASSED, FAILED, SKIPPED
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  testRun     TestRun  @relation(fields: [testRunId], references: [id], onDelete: Cascade)
  testCase    TestCase @relation(fields: [testCaseId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([testRunId, testCaseId])
  @@index([testRunId])
  @@index([testCaseId])
  @@index([userId])
}

enum TestRunStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TestResultStatus {
  PASSED
  FAILED
  BLOCKED
  SKIPPED
}

model TestCaseResult {
  id          String          @id @default(uuid())
  testCase    TestCase       @relation(fields: [testCaseId], references: [id])
  testCaseId  String
  testRun     TestRun        @relation(fields: [testRunId], references: [id])
  testRunId   String
  status      TestResultStatus
  notes       String?
  evidence    String[]       @default([])
  executedBy  User          @relation(fields: [executedById], references: [id])
  executedById String
  executedAt  DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([testCaseId])
  @@index([testRunId])
  @@index([executedById])
}

model ActivityLog {
  id        String   @id @default(cuid())
  type      String // 'AUTH' | 'USER' | 'SYSTEM'
  action    String // Store the audit action
  userId    String   @map("user_id")
  targetId  String?  @map("target_id")
  metadata  String? // JSON string
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  location  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([action])
  @@index([createdAt])
}

model TrustedDevice {
  id        String   @id
  userId    String
  name      String
  userAgent String
  lastUsed  DateTime
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model WebAuthnCredential {
  id                  String   @id @default(cuid())
  userId              String
  credentialID        String   @unique
  credentialPublicKey String
  counter             Int      @default(0)
  transportsData      String // JSON string of AuthenticatorTransport[]
  lastUsed            DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([credentialID])
}

model ApiKey {
  id         String    @id @default(cuid())
  userId     String
  hashedKey  String    @unique
  name       String
  scopesData String // Store array as JSON string
  expiresAt  DateTime?
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hashedKey])
}

model PasswordHistory {
  id        String   @id @default(cuid())
  userId    String
  hash      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TestReport {
  id          String      @id @default(cuid())
  name        String
  description String?
  projectId   String
  runId       String
  statistics  Json
  results     Json
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  project     Project     @relation(fields: [projectId], references: [id])
  testRun     TestRun     @relation(fields: [runId], references: [id])
  createdBy   User        @relation(fields: [createdById], references: [id])

  @@index([projectId])
  @@index([runId])
  @@index([createdById])
}

model RevokedToken {
  id        String    @id @default(cuid())
  token     String    @unique
  type      String // TokenType enum value
  revokedAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([token])
  @@index([type])
  @@index([revokedAt])
}

model ProjectMember {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      String   @default("MEMBER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model BackupCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@index([userId])
}

model TestSuite {
  id          String     @id @default(uuid())
  name        String
  description String?
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  testCases   TestCase[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([projectId])
  @@map("test_suite")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  userPermissions UserPermission[]
}

model UserPermission {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  type      String
  ipAddress String?
  userAgent String?
  details   String? // JSON string for flexible metadata
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("user_activity")
}

model Token {
  id        String   @id @default(cuid())
  token     String   @unique
  type      String
  userId    String
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
}

model TestResult {
  id          String    @id @default(cuid())
  testCase    TestCase  @relation(fields: [testCaseId], references: [id])
  testCaseId  String
  status      String
  notes       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([testCaseId])
}

enum SyncConflictStatus {
  PENDING
  RESOLVED
  REJECTED
}

model SyncConflict {
  id            String   @id @default(uuid())
  clientVersion Json
  serverVersion Json
  userId        String
  timestamp     DateTime
  status        String   @default("PENDING")
  resolution    String?
  resolvedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}
